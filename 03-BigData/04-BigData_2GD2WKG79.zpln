{
  "paragraphs": [
    {
      "text": "sc // the spark context (i.e., the application) has been already initialized",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:22.122",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres60\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.SparkContext\u001b[0m \u003d org.apache.spark.SparkContext@36b20f03\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626184608976_671692505",
      "id": "paragraph_1626184608976_671692505",
      "dateCreated": "2021-07-13 13:56:48.976",
      "dateStarted": "2021-07-13 14:31:22.156",
      "dateFinished": "2021-07-13 14:31:22.247",
      "status": "FINISHED"
    },
    {
      "text": "sc // from the spark context\n    .getConf.getAll // get the configuration\n    .filter(_._1.startsWith(\"spark\")) // keep only the string regarding sparks\n    .foreach(println(_)) // ... and print them",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:22.256",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(spark.driver.memory,1g)\n(spark.repl.class.outputDir,/tmp/spark7004006872584735152)\n(spark.repl.class.uri,spark://54b40fa293f4:38411/classes)\n(spark.webui.yarn.useProxy,false)\n(spark.executor.memory,1g)\n(spark.executor.instances,2)\n(spark.useHiveContext,true)\n(spark.master,local[*])\n(spark.driver.cores,1)\n(spark.driver.host,54b40fa293f4)\n(spark.scheduler.mode,FAIR)\n(spark.executor.id,driver)\n(spark.app.id,local-1626179829299)\n(spark.app.name,b64bf1b4-7784-4466-beb4-8e20bfc9f9be)\n(spark.driver.port,38411)\n(spark.executor.cores,1)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626184950221_668055625",
      "id": "paragraph_1626184950221_668055625",
      "dateCreated": "2021-07-13 14:02:30.221",
      "dateStarted": "2021-07-13 14:31:22.357",
      "dateFinished": "2021-07-13 14:31:22.517",
      "status": "FINISHED"
    },
    {
      "text": "// let\u0027s create a simple example\nval riddle \u003d \"sopra la panca la capra campa sotto la panca capra crepa\"",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:22.587",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mriddle\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d sopra la panca la capra campa sotto la panca capra crepa\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625738803400_1745387905",
      "id": "paragraph_1625738803400_1745387905",
      "dateCreated": "2021-07-08 10:06:43.401",
      "dateStarted": "2021-07-13 14:31:22.607",
      "dateFinished": "2021-07-13 14:31:22.693",
      "status": "FINISHED"
    },
    {
      "text": "val rdd \u003d sc.parallelize(riddle.split(\" \")) // create an RDD from the `riddle` string\n// each tuple of the RDD corresponds to a single word\n\n// why is an RDD and not its result returned?",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:22.707",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mrdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d ParallelCollectionRDD[519] at parallelize at \u003cconsole\u003e:27\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625738922982_961760574",
      "id": "paragraph_1625738922982_961760574",
      "dateCreated": "2021-07-08 10:08:42.982",
      "dateStarted": "2021-07-13 14:31:22.808",
      "dateFinished": "2021-07-13 14:31:22.940",
      "status": "FINISHED"
    },
    {
      "text": "// Actions\nrdd.collect() // compute the RDD",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:23.033",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres62\u001b[0m: \u001b[1m\u001b[32mArray[String]\u001b[0m \u003d Array(sopra, la, panca, la, capra, campa, sotto, la, panca, capra, crepa)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d92"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625738959129_821495934",
      "id": "paragraph_1625738959129_821495934",
      "dateCreated": "2021-07-08 10:09:19.129",
      "dateStarted": "2021-07-13 14:31:23.052",
      "dateFinished": "2021-07-13 14:31:23.164",
      "status": "FINISHED"
    },
    {
      "text": "// Transformations\nrdd\n    .map(s \u003d\u003e s.toUpperCase()) // transform each string in upper case (remember: map returns a new RDD with the same cardinality)\n    .filter(s \u003d\u003e s.startsWith(\"C\")) // keep only the strings beginning with \"C\" (remember: filter returns a new RDD with the same or smaller cardinality)\n    .flatMap(s \u003d\u003e s.toList) // explode each string into its characters (remember: flatMap returns a new RDD with the any cardinality)\n    .collect()",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:23.252",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres63\u001b[0m: \u001b[1m\u001b[32mArray[Char]\u001b[0m \u003d Array(C, A, P, R, A, C, A, M, P, A, C, A, P, R, A, C, R, E, P, A)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d93"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625739256540_787795271",
      "id": "paragraph_1625739256540_787795271",
      "dateCreated": "2021-07-08 10:14:16.541",
      "dateStarted": "2021-07-13 14:31:23.320",
      "dateFinished": "2021-07-13 14:31:23.497",
      "status": "FINISHED"
    },
    {
      "text": "// A simple word count\nrdd\n    .map(s \u003d\u003e (s, 1)) // map each word to a tuple (word, 1); each tuple represent the count associate with a word\n    .reduceByKey((a, b) \u003d\u003e a + b) // group all the tuples with the same word and sum the counts\n    .sortBy(x \u003d\u003e x._2) // sort tuples by count\n    .collect() // get the values",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:23.520",
      "progress": 66,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres64\u001b[0m: \u001b[1m\u001b[32mArray[(String, Int)]\u001b[0m \u003d Array((campa,1), (sotto,1), (crepa,1), (sopra,1), (panca,2), (capra,2), (la,3))\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d94"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d95"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625739017687_262430082",
      "id": "paragraph_1625739017687_262430082",
      "dateCreated": "2021-07-08 10:10:17.688",
      "dateStarted": "2021-07-13 14:31:23.549",
      "dateFinished": "2021-07-13 14:31:23.909",
      "status": "FINISHED"
    },
    {
      "text": "// create a DataFrame from a local file\nval foodmartDataset \u003d\n    spark\n        .read // read the file\n        .format(\"csv\") // which has a csv (comma separated value) format\n        .option(\"header\", \"true\") // and also contains a header\n        .load(\"/opt/zeppelin/notebook/datasets/foodmart.csv\") // specify the file location\n        .select(col(\"Product (Category)\").as(\"product\"), col(\"subcategory\"), col(\"category\"), col(\"unit sales\").cast(\"int\")) // select some of its columns\n        .cache() // why caching?",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:23.944",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mfoodmartDataset\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [product: string, subcategory: string ... 2 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d96"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625842324384_1191242572",
      "id": "paragraph_1625842324384_1191242572",
      "dateCreated": "2021-07-09 14:52:04.384",
      "dateStarted": "2021-07-13 14:31:23.964",
      "dateFinished": "2021-07-13 14:31:24.373",
      "status": "FINISHED"
    },
    {
      "text": "foodmartDataset.show() // and show some of its tuples",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:24.464",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+----------------+-------------------+----------+\n|             product|     subcategory|           category|unit sales|\n+--------------------+----------------+-------------------+----------+\n|       CDR Apple Jam|             Jam|   Jams and Jellies|         3|\n|Landslide Creamy ...|   Peanut Butter|   Jams and Jellies|         3|\n|Fort West BBQ Pot...|           Chips|        Snack Foods|         3|\n|Horatio Raspberry...|     Dried Fruit|        Snack Foods|         2|\n|Red Wing Toilet P...|     Paper Wipes|     Paper Products|         2|\n|Bravo Turkey Nood...|            Soup|        Canned Soup|         1|\n|Big Time Frozen S...|           Pizza|              Pizza|         1|\n|Atomic Mint Choco...| Chocolate Candy|              Candy|         1|\n| CDR Grape Preserves|       Preserves|   Jams and Jellies|         2|\n|   Moms Pimento Loaf|         Bologna|               Meat|         1|\n|Big Time Frozen C...|  Frozen Chicken|               Meat|         1|\n|  Ebony Green Pepper|Fresh Vegetables|         Vegetables|         2|\n|Fort West Chocola...|         Cookies|        Snack Foods|         2|\n|Cormorant Copper ...|    Pot Cleaners|   Kitchen Products|         1|\n|  BBB Best Grape Jam|             Jam|   Jams and Jellies|         2|\n|  High Top Firm Tofu|            Tofu|Packaged Vegetables|         1|\n|High Quality Copp...|   Pot Scrubbers|   Kitchen Products|         2|\n|   Plato Brown Sugar|           Sugar|       Baking Goods|         3|\n|     Ebony Honey Dew|     Fresh Fruit|              Fruit|         1|\n|Best Choice Chees...|        Crackers|        Snack Foods|         2|\n+--------------------+----------------+-------------------+----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d97"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626186059682_1913164141",
      "id": "paragraph_1626186059682_1913164141",
      "dateCreated": "2021-07-13 14:20:59.682",
      "dateStarted": "2021-07-13 14:31:24.483",
      "dateFinished": "2021-07-13 14:31:24.641",
      "status": "FINISHED"
    },
    {
      "text": "// show only the sales for category \u003d \u0027Pizza\u0027\nfoodmartDataset\n    .filter(\"category \u003d \u0027Pizza\u0027\") // apply a selection clause\n    .show(20, false)",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:24.685",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---------------------------------+-----------+--------+----------+\n|product                          |subcategory|category|unit sales|\n+---------------------------------+-----------+--------+----------+\n|Big Time Frozen Sausage Pizza    |Pizza      |Pizza   |1         |\n|Big Time Frozen Mushroom Pizza   |Pizza      |Pizza   |1         |\n|Imagine Frozen Sausage Pizza     |Pizza      |Pizza   |1         |\n|Imagine Frozen Pepperoni Pizza   |Pizza      |Pizza   |2         |\n|Imagine Frozen Pepperoni Pizza   |Pizza      |Pizza   |1         |\n|PigTail Frozen Cheese Pizza      |Pizza      |Pizza   |2         |\n|PigTail Frozen Pepperoni Pizza   |Pizza      |Pizza   |2         |\n|Carrington Frozen Pepperoni Pizza|Pizza      |Pizza   |2         |\n|PigTail Frozen Cheese Pizza      |Pizza      |Pizza   |1         |\n|PigTail Frozen Mushroom Pizza    |Pizza      |Pizza   |2         |\n|Big Time Frozen Pepperoni Pizza  |Pizza      |Pizza   |1         |\n|Big Time Frozen Cheese Pizza     |Pizza      |Pizza   |2         |\n|Golden Frozen Sausage Pizza      |Pizza      |Pizza   |2         |\n|Big Time Frozen Sausage Pizza    |Pizza      |Pizza   |1         |\n|Carrington Frozen Pepperoni Pizza|Pizza      |Pizza   |3         |\n|Big Time Frozen Sausage Pizza    |Pizza      |Pizza   |2         |\n|Imagine Frozen Cheese Pizza      |Pizza      |Pizza   |3         |\n|Carrington Frozen Pepperoni Pizza|Pizza      |Pizza   |3         |\n|Carrington Frozen Sausage Pizza  |Pizza      |Pizza   |4         |\n|Big Time Frozen Mushroom Pizza   |Pizza      |Pizza   |2         |\n+---------------------------------+-----------+--------+----------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d98"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625843117680_1979385895",
      "id": "paragraph_1625843117680_1979385895",
      "dateCreated": "2021-07-09 15:05:17.680",
      "dateStarted": "2021-07-13 14:31:24.706",
      "dateFinished": "2021-07-13 14:31:24.902",
      "status": "FINISHED"
    },
    {
      "text": "// count all the product sales\nval allSales \u003d foodmartDataset.count()\n\n// count the distinct products\nval distinctProducts \u003d \n    foodmartDataset\n        .select(\"product\") // select the products only\n        .distinct() // get the distinct values\n        .count() // and count them\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:24.906",
      "progress": 48,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mallSales\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m \u003d 86837\n\u001b[1m\u001b[34mdistinctProducts\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m \u003d 1559\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d99"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d100"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626186325649_1621764430",
      "id": "paragraph_1626186325649_1621764430",
      "dateCreated": "2021-07-13 14:25:25.649",
      "dateStarted": "2021-07-13 14:31:24.950",
      "dateFinished": "2021-07-13 14:31:26.344",
      "status": "FINISHED"
    },
    {
      "text": "// return the amount of sales by category\nfoodmartDataset // given the dataframe\n    .groupBy(\"category\") // group all tuples by category\n    .sum(\"unit sales\") // sum the unit sales\n    .orderBy(\"sum(unit sales)\") // and sort the result\n    .show() // compute the result",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:26.354",
      "progress": 79,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+---------------+\n|            category|sum(unit sales)|\n+--------------------+---------------+\n|      Canned Oysters|            708|\n|       Canned Shrimp|            804|\n|             Candles|            815|\n|     Canned Sardines|            819|\n|        Canned Clams|            882|\n| Packaged Vegetables|            886|\n|    Canned Anchovies|            900|\n|       Miscellaneous|            969|\n|         Canned Tuna|           1710|\n|             Seafood|           1764|\n|       Cold Remedies|           1776|\n|       Decongestants|           1813|\n|              Drinks|           2469|\n|    Plastic Products|           2477|\n|            Hardware|           2492|\n|      Frozen Entrees|           2585|\n|         Side Dishes|           2604|\n|      Pain Relievers|           3254|\n|               Pizza|           3310|\n|Pure Juice Beverages|           3396|\n+--------------------+---------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d101"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625843495878_2127914479",
      "id": "paragraph_1625843495878_2127914479",
      "dateCreated": "2021-07-09 15:11:35.878",
      "dateStarted": "2021-07-13 14:31:26.396",
      "dateFinished": "2021-07-13 14:31:27.499",
      "status": "FINISHED"
    },
    {
      "text": "// get the number of distinct products with category \u003d \u0027Pizza\u0027\nfoodmartDataset\n    .filter(\"category \u003d \u0027Pizza\u0027\")\n    .select(\"product\") // select the products only\n    .distinct() // get the distinct values\n    .count() // and count them",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:27.593",
      "progress": 35,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres68\u001b[0m: \u001b[1m\u001b[32mLong\u001b[0m \u003d 20\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d102"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626185549421_406391997",
      "id": "paragraph_1626185549421_406391997",
      "dateCreated": "2021-07-13 14:12:29.421",
      "dateStarted": "2021-07-13 14:31:27.612",
      "dateFinished": "2021-07-13 14:31:28.619",
      "status": "FINISHED"
    },
    {
      "text": "// get the average sales by category\nfoodmartDataset\n    .groupBy(\"category\") // select the products only\n    .avg(\"unit sales\")\n    .show()",
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:28.712",
      "progress": 39,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+------------------+\n|           category|   avg(unit sales)|\n+-------------------+------------------+\n|      Miscellaneous|3.1563517915309447|\n|    Breakfast Foods|3.0648250460405158|\n|   Canned Anchovies| 3.114186851211073|\n|    Frozen Desserts| 3.045745204131825|\n|      Starchy Foods|3.1117681845062095|\n|       Baking Goods| 3.072426470588235|\n|   Plastic Products| 3.046740467404674|\n|   Kitchen Products|3.0919117647058822|\n|            Candles| 3.029739776951673|\n|  Cleaning Supplies| 3.080572963294539|\n|Packaged Vegetables|3.0136054421768708|\n|          Specialty|3.0811287477954146|\n|        Side Dishes| 3.085308056872038|\n|               Meat| 3.079874354947274|\n|      Beer and Wine|3.0815682739972963|\n|   Jams and Jellies|3.0734229576008274|\n|      Hot Beverages| 3.092020129403307|\n|              Pizza|3.0905695611577966|\n|         Vegetables|3.0774983640272975|\n|     Frozen Entrees|3.0773809523809526|\n+-------------------+------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d103"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d104"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d105"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d106"
            },
            {
              "jobUrl": "http://54b40fa293f4:4040/jobs/job?id\u003d107"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626185613032_1090434638",
      "id": "paragraph_1626185613032_1090434638",
      "dateCreated": "2021-07-13 14:13:33.032",
      "dateStarted": "2021-07-13 14:31:28.733",
      "dateFinished": "2021-07-13 14:31:29.310",
      "status": "FINISHED"
    },
    {
      "user": "anonymous",
      "dateUpdated": "2021-07-13 14:31:29.333",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1626186500562_1097934745",
      "id": "paragraph_1626186500562_1097934745",
      "dateCreated": "2021-07-13 14:28:20.562",
      "status": "FINISHED"
    }
  ],
  "name": "04-BigData",
  "id": "2GD2WKG79",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {
    "isRunning": true
  }
}